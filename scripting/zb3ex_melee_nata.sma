/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <engine>
#include <fakemeta>
#include <fakemeta_util>
#include <hamsandwich>
#include <xs>
#include <zombie_thehero2>

#define PLUGIN "[Zombie: The Hero 2] Melee Weapon: Nata"
#define VERSION "2.0"
#define AUTHOR "Dias"

#define NATA_DAMAGE_SLASH 300.0
#define NATA_DAMAGE_STAB 600.0
#define NATA_RANGE_SLASH 55.0
#define NATA_RANGE_STAB 105.0
#define NATA_NEXTATTACK_SLASH 1.0
#define NATA_NEXTATTACK_STAB 1.5

new v_model[] = "models/zombie_thehero/wpn/melee/v_strong_knife.mdl"
new p_model[] = "models/zombie_thehero/wpn/melee/p_strong_knife.mdl"

new const nata_sound[5][] = 
{
	"weapons/strong_knife_draw.wav",
	"weapons/nata_hit_1.wav",
	"weapons/nata_slash.wav",
	"weapons/nata_stab.wav",
	"weapons/nata_wall.wav"
}

enum
{
	KNIFE_ANIM_IDLE = 0,
	KNIFE_ANIM_SLASH1,
	KNIFE_ANIM_SLASH2,
	KNIFE_ANIM_DRAW,
	KNIFE_ANIM_STAB_HIT,
	KNIFE_ANIM_STAB_MISS,
	KNIFE_ANIM_MIDSLASH1,
	KNIFE_ANIM_MIDSLASH2
}

enum
{
	ATTACK_SLASH = 1,
	ATTACK_STAB,
}

new g_nata
new g_had_nata[33], g_attack_type[33]

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_event("CurWeapon", "Event_CurWeapon", "be", "1=1")
	
	register_forward(FM_CmdStart, "fw_CmdStart")
	register_forward(FM_EmitSound, "fw_EmitSound")
	register_forward(FM_TraceLine, "fw_TraceLine")
	register_forward(FM_TraceHull, "fw_TraceHull")	
	
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_knife", "fw_PriAttack_Post", 1)
	RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_knife", "fw_SecAttack_Post", 1)
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack")
	
	register_clcmd("say /nata", "get_nata")
}

public plugin_precache()
{
	engfunc(EngFunc_PrecacheModel, v_model)
	engfunc(EngFunc_PrecacheModel, p_model)
	
	for(new i = 0; i < sizeof(nata_sound); i++)
		engfunc(EngFunc_PrecacheSound, nata_sound[i])	
		
	g_nata = zb3_register_weapon("strong_knife")
}

public zb3_user_spawned(id) remove_nata(id)
public zb3_user_dead(id) remove_nata(id)
public zb3_user_infected(id) remove_nata(id)
public zb3_weapon_selected_post(id, weaponid)
{
	if(weaponid == g_nata) get_nata(id)
}

public get_nata(id)
{
	g_had_nata[id] = 1
	g_attack_type[id] = 0
	
	if(get_user_weapon(id) == CSW_KNIFE) 
	{
		Event_CurWeapon(id)
		set_weapon_anim(id, KNIFE_ANIM_DRAW)
	}		
}

public remove_nata(id)
{
	g_had_nata[id] = 0
	g_attack_type[id] = 0	
}

public Event_CurWeapon(id)
{
	if(!is_user_alive(id))
		return 1
	if(get_user_weapon(id) != CSW_KNIFE)
		return 1
	if(!g_had_nata[id])
		return 1
		
	set_pev(id, pev_viewmodel2, v_model)
	set_pev(id, pev_weaponmodel2, p_model)
		
	return 0
}

public fw_CmdStart(id, uc_handle, seed)
{
	if (!is_user_alive(id)) 
		return
	if(get_user_weapon(id) != CSW_KNIFE)
		return
	if(!g_had_nata[id])
		return
	
	static ent
	ent = find_ent_by_owner(-1, "weapon_knife", id)
	
	if(!pev_valid(ent))
		return
	if(get_pdata_float(ent, 46, 4) > 0.0 || get_pdata_float(ent, 47, 4) > 0.0) 
		return
	
	static CurButton
	CurButton = get_uc(uc_handle, UC_Buttons)
	
	if(CurButton & IN_ATTACK)
	{
		g_attack_type[id] = ATTACK_SLASH
	} else {
		g_attack_type[id] = ATTACK_STAB
	}
}

public fw_PriAttack_Post(ent)
{
	if(pev_valid(ent) != 2)
		return HAM_IGNORED
		
	new id
	id = get_pdata_cbase(ent, 41 , 4)
	
	if(!g_had_nata[id])
		return HAM_IGNORED	
		
	set_weapons_timeidle(id, NATA_NEXTATTACK_SLASH)
	set_player_nextattack(id, NATA_NEXTATTACK_SLASH)
	
	return HAM_HANDLED
}

public fw_SecAttack_Post(ent)
{
	if(pev_valid(ent) != 2)
		return HAM_IGNORED
		
	new id
	id = get_pdata_cbase(ent, 41 , 4)
	
	if(!g_had_nata[id])
		return HAM_IGNORED	
		
	set_weapons_timeidle(id, NATA_NEXTATTACK_STAB)
	set_player_nextattack(id, NATA_NEXTATTACK_STAB)	
	
	return HAM_HANDLED
}

public fw_EmitSound(id, channel, const sample[], Float:volume, Float:attn, flags, pitch)
{
	if(!is_user_connected(id))
		return FMRES_IGNORED
	if(get_user_weapon(id) != CSW_KNIFE || !g_had_nata[id])
		return FMRES_IGNORED
		
	if(sample[8] == 'k' && sample[9] == 'n' && sample[10] == 'i')
	{
		if(sample[14] == 's' && sample[15] == 'l' && sample[16] == 'a')
		{
			emit_sound(id, channel, nata_sound[2], volume, attn, flags, pitch)
			return FMRES_SUPERCEDE
		}
		if (sample[14] == 'h' && sample[15] == 'i' && sample[16] == 't') // hit
		{
			if (sample[17] == 'w')
			{
				emit_sound(id, channel, nata_sound[4], volume, attn, flags, pitch)
				return FMRES_SUPERCEDE
			} else {
				emit_sound(id, channel, nata_sound[1], volume, attn, flags, pitch)
				return FMRES_SUPERCEDE
			}
		}
		if (sample[14] == 's' && sample[15] == 't' && sample[16] == 'a') // stab
		{
			emit_sound(id, channel, nata_sound[3], volume, attn, flags, pitch)
			return FMRES_SUPERCEDE;
		}
	}
	
	return FMRES_IGNORED
}

public fw_TraceLine(Float:vector_start[3], Float:vector_end[3], ignored_monster, id, handle)
{
	if (!is_user_alive(id))
		return FMRES_IGNORED
	if(zb3_get_user_zombie(id))
		return FMRES_IGNORED		
	if (get_user_weapon(id) != CSW_KNIFE)
		return FMRES_IGNORED
	if(!g_had_nata[id])
		return FMRES_IGNORED
	
	static Float:vecStart[3], Float:vecEnd[3], Float:v_angle[3], Float:v_forward[3], Float:view_ofs[3], Float:fOrigin[3]
	
	pev(id, pev_origin, fOrigin)
	pev(id, pev_view_ofs, view_ofs)
	xs_vec_add(fOrigin, view_ofs, vecStart)
	pev(id, pev_v_angle, v_angle)
	
	engfunc(EngFunc_MakeVectors, v_angle)
	get_global_vector(GL_v_forward, v_forward)
	
	static Float:scalar
	
	if(g_attack_type[id] == ATTACK_SLASH) scalar = NATA_RANGE_SLASH
	else if(g_attack_type[id] == ATTACK_STAB) scalar = NATA_RANGE_STAB
	
	xs_vec_mul_scalar(v_forward, scalar, v_forward)
	xs_vec_add(vecStart, v_forward, vecEnd)
	
	engfunc(EngFunc_TraceLine, vecStart, vecEnd, ignored_monster, id, handle)
	
	return FMRES_SUPERCEDE
}

public fw_TraceHull(Float:vector_start[3], Float:vector_end[3], ignored_monster, hull, id, handle)
{
	if (!is_user_alive(id))
		return FMRES_IGNORED
	if(zb3_get_user_zombie(id))
		return FMRES_IGNORED
	if (get_user_weapon(id) != CSW_KNIFE)
		return FMRES_IGNORED
	if(!g_had_nata[id])
		return FMRES_IGNORED
	
	static Float:vecStart[3], Float:vecEnd[3], Float:v_angle[3], Float:v_forward[3], Float:view_ofs[3], Float:fOrigin[3]
	
	pev(id, pev_origin, fOrigin)
	pev(id, pev_view_ofs, view_ofs)
	xs_vec_add(fOrigin, view_ofs, vecStart)
	pev(id, pev_v_angle, v_angle)
	
	engfunc(EngFunc_MakeVectors, v_angle)
	get_global_vector(GL_v_forward, v_forward)
	
	static Float:scalar
	
	if(g_attack_type[id] == ATTACK_SLASH) scalar = NATA_RANGE_SLASH
	else if(g_attack_type[id] == ATTACK_STAB) scalar = NATA_RANGE_STAB
	
	xs_vec_mul_scalar(v_forward, scalar, v_forward)
	xs_vec_add(vecStart, v_forward, vecEnd)
	
	engfunc(EngFunc_TraceHull, vecStart, vecEnd, ignored_monster, hull, id, handle)
	
	return FMRES_SUPERCEDE
}

public fw_TraceAttack(Victim, Attacker, Float:Damage, Float:Direction[3], TraceHandle, DamageBit)
{
	if(!is_user_alive(Attacker))
		return HAM_IGNORED
	if(get_user_weapon(Attacker) != CSW_KNIFE)
		return HAM_IGNORED
	if(!g_had_nata[Attacker])
		return HAM_IGNORED

	Damage = g_attack_type[Attacker] == ATTACK_SLASH ? NATA_DAMAGE_SLASH : NATA_DAMAGE_STAB

	static Float:vecSrc[3];
	static Float:vecAngles[3];
	static Float:vecForward[3];
	static Float:vecAttackDir[3];
	
	GetCenter(Victim, vecSrc);
	GetCenter(Attacker, vecAttackDir);
	
	xs_vec_sub(vecAttackDir, vecSrc, vecAttackDir);
	xs_vec_normalize(vecAttackDir, vecAttackDir);
	
	pev(Victim, pev_angles, vecAngles);
	engfunc(EngFunc_MakeVectors, vecAngles);
	
	global_get(glb_v_forward, vecForward);
	xs_vec_mul_scalar(vecAttackDir, -1.0, vecAttackDir);
	
	if(xs_vec_dot(vecForward, vecAttackDir) > 0.3)
		Damage *= 3	//client_print(Attacker, print_center, "Backstabs are not allowed on this server!")

	SetHamParamFloat(3, Damage)
	
	return HAM_IGNORED
}

stock set_weapons_timeidle(id, Float:TimeIdle)
{
	if(!is_user_alive(id))
		return
		
	new entwpn = fm_get_user_weapon_entity(id, CSW_KNIFE)
	if (pev_valid(entwpn)) 
	{
		set_pdata_float(entwpn, 46, TimeIdle, 4)
		set_pdata_float(entwpn, 47, TimeIdle, 4)
		set_pdata_float(entwpn, 48, TimeIdle + 1.0, 4)
	}
}

stock set_player_nextattack(id, Float:nexttime)
{
	if(!is_user_alive(id))
		return
		
	const m_flNextAttack = 83
	set_pdata_float(id, m_flNextAttack, nexttime, 5)
}

stock set_weapon_anim(id, anim)
{
	if(!is_user_alive(id))
		return
		
	set_pev(id, pev_weaponanim, anim)
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id)
	write_byte(anim)
	write_byte(0)
	message_end()	
}
GetCenter(const iEntity, Float: vecSrc[3])
{
	static Float:vecAbsMax[3];
	static Float:vecAbsMin[3];
	
	pev(iEntity, pev_absmax, vecAbsMax);
	pev(iEntity, pev_absmin, vecAbsMin);
	
	xs_vec_add(vecAbsMax, vecAbsMin, vecSrc);
	xs_vec_mul_scalar(vecSrc, 0.5, vecSrc);
}